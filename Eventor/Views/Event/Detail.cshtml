@model Eventor.Models.EventDetailViewModel

@{
    ViewBag.Title = HttpContext.Current.Request.RequestContext.RouteData.Values["Action"];
    Layout = "~/Views/Shared/_EventLayout.cshtml";
}

<div id="content">
    <strong data-bind="html: Pending"></strong>

    <div data-bind="with: CurrentEvent">
        <h2 data-bind="text: Name"></h2>
        <p data-bind="text: Description"></p>
    </div>

    <ul data-bind="foreach: SubEvents" id="event_list">
        <li>
            <h2></h2>
            <p data-bind="text: Content"></p>
            <div class="progress_bar">100 %</div>
            <div class="event_buttons">
                <button class="remove_btn"></button>
                <button class="edit_btn" data-toggle="modal" data-target="#editModal"></button>
            </div>
        </li>
    </ul>
    <div class="exclusive_block">
        <span>
            <h2>New Task?</h2>
            <!-- Button trigger modal -->
            <button type="button" class="button green" data-toggle="modal" data-target="#createModal">
                Create new task?
            </button>
        </span>
    </div>
</div>

<!-- Confirmation Modal -->
<div data-bind="with: ConfirmDialog" class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Ajax.BeginForm("RegisterVisitor", "Account", new AjaxOptions() { OnSuccess = "knockoutTemplate.ProcessConfirmDialogConfirm", OnFailure = "alert('onfailure fired')", HttpMethod = "POST", LoadingElementId = "div_loading" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title" id="myModalLabel">Event Edit</h4>
                </div>
                <div class="modal-body">
                    <div>
                        <div>
                            I agree with terms and conditions
                            @Html.ValidationMessageFor(m => m.EventConfirmationViewModel.iAgree)
                            @Html.CheckBoxFor(m => m.EventConfirmationViewModel.iAgree, new { data_bind = "checked: iAgree", title = "Terms and Conditions" })
                        </div>
                        <div>
                            @Html.ValidationMessageFor(m => m.EventConfirmationViewModel.Email)
                            @Html.TextBoxFor(m => m.EventConfirmationViewModel.Email, new { data_bind = "value: Email", @class = "text_input" })
                        </div>
                        <div id="div_loading" style="display:none;">
                            <img src="@Url.Content("~/Content/img/ajax-loader.gif")" alt="" />
                        </div>
                        <br />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" data-bind="click: $parent.ProcessConfirmDialogClose" class="button blue" data-dismiss="modal" style="float:right;">Close</button>
                    <button type="submit" class="button green">Confirm</button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/EEvent.js")
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"> </script>

    <script type="text/javascript">

        (function ($) {
            $.validator.unobtrusive.adapters.addBool("booleanrequired", "required");
        }(jQuery));

        $(document).ready(function () {
            $('#confirmModal').modal('show');
        });

        var action = '@HttpContext.Current.Request.RequestContext.RouteData.Values["Action"]';
        var EventID = (action != "Create") ? '@HttpContext.Current.Request.RequestContext.RouteData.Values["EventID"]' : null;

        var knockoutTemplate = new EventApp.EventViewModel(EventID);
        ko.applyBindings(knockoutTemplate);
       
    </script>
}
