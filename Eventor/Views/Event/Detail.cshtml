@model Eventor.Models.EventDetailViewModel

@{
    ViewBag.Title = HttpContext.Current.Request.RequestContext.RouteData.Values["Action"];
    Layout = "~/Views/Shared/_EventLayout.cshtml";
}

@Styles.Render("~/Content/css/unreset.css")

<div id="content">
    <div id="event-detail">
        <strong data-bind="html: Pending"></strong>

        <div data-bind="with: CurrentEvent" class="text_content">
            <div class="editable_block">
                <h1 data-bind="visible: !Name.editing(), text: Name.text">&nbsp;</h1>
                <input type="text" class="form-control" data-bind="visible: Name.editing(), value: Name.text" />
                <button data-bind="click: function () { $parent.ChangeEditState(Name); }" class="edit_btn_detail" title="Click to Edit">Click to Edit</button>
            </div>
            <div class="editable_block">
                <p data-bind="visible: !Description.editing(), text: Description.text">&nbsp;</p>
                <textarea class="form-control" data-bind="visible: Description.editing(), value: Description.text"></textarea>
                <button data-bind="click: function () { $parent.ChangeEditState(Description); }" class="edit_btn_detail" title="Click to Edit">Click to Edit</button>
            </div>
            <div class="editable_block">
                <div class="unreset" data-bind="visible: !Content.editing(), html: Content.text">&nbsp;</div>
                <textarea id="txt_viewModelVariableName" data-bind="visible: false, ckEditor: { observable: Content.text, editing: Content.editing }"></textarea>
                <button data-bind="click: function () { $parent.ChangeEditState(Content);; }" class="edit_btn_detail" title="Click to Edit">Click to Edit</button>
            </div>
        </div>

        @Styles.Render("~/Content/themes/base/all.css")
        @Scripts.Render("~/Scripts/jquery-ui-1.11.2.js")

        <!-- Modal Windows -->
        <div data-bind="with: CreatedSubEvent" class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                        <h4 class="modal-title" id="myModalLabel">Event Creation</h4>
                    </div>
                    <div class="modal-body">
                        <div>
                            <div>
                                <input placeholder="Name" data-bind="value: Name" type="text" title="Name" class="text_input" />
                            </div>
                            <div>
                                <textarea placeholder="Description" data-bind="value: Description" title="Description" class="text_input"></textarea>
                            </div>
                            <br />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="button blue" data-dismiss="modal" style="float:right;">Close</button>
                        <button type="button" class="button green" data-bind="click: $parent.AddSubEvent" data-dismiss="modal">Save Event</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal -->
        <div data-bind="with: EditedSubEvent" class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                        <h4 class="modal-title" id="myModalLabel">Event Edit</h4>
                    </div>
                    <div class="modal-body">
                        <div>
                            <div>
                                <input data-bind="value: Name" type="text" title="Name" class="text_input" />
                            </div>
                            <div>
                                <textarea data-bind="value: Description" title="Description" class="text_input"></textarea>
                            </div>
                            <br />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="button blue" data-dismiss="modal" style="float:right;">Close</button>
                        <button type="button" class="button green" data-bind="click: $parent.EditSubEvent" data-dismiss="modal">Edit Event</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div data-bind="with: ConfirmDialog" class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">
                    @using (Ajax.BeginForm("RegisterVisitor", "Account", new AjaxOptions() { OnSuccess = "knockoutTemplate.ProcessConfirmDialogConfirm", OnFailure = "alert('onfailure fired')", HttpMethod = "POST", LoadingElementId = "div_loading" }))
                    {
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                            <h4 class="modal-title" id="myModalLabel">Event Edit</h4>
                        </div>
                        <div class="modal-body">
                            <div>
                                <div>
                                    I agree with terms and conditions
                                    @Html.ValidationMessageFor(m => m.EventConfirmationViewModel.iAgree)
                                    @Html.CheckBoxFor(m => m.EventConfirmationViewModel.iAgree, new { data_bind = "checked: iAgree", title = "Terms and Conditions" })
                                </div>
                                <div>
                                    @Html.ValidationMessageFor(m => m.EventConfirmationViewModel.Email)
                                    @Html.TextBoxFor(m => m.EventConfirmationViewModel.Email, new { data_bind = "value: Email", @class = "text_input" })
                                </div>
                                <div id="div_loading" style="display:none;">
                                    <img src="@Url.Content("~/Content/img/ajax-loader.gif")" alt="" />
                                </div>
                                <br />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" data-bind="click: $parent.ProcessConfirmDialogClose" class="button blue" data-dismiss="modal" style="float:right;">Close</button>
                            <button type="submit" class="button green">Confirm</button>
                        </div>
            }
                </div>
            </div>
        </div>

        <div id ="add_member" class="ui-widget active">
            <div id="add_member_hide"></div>
            <h2>Add a member?</h2>
            <input type="text" class="text_input" data-bind="autoComplete: { selected: SelectedUser }" />
            <button data-bind="click: AddMember" class="button">Click to Add</button>
        </div>
    </div>
    <div id="event-detail-tree">
        <div class="exclusive_block">
            <span>
                <h2>New Task?</h2>
                <!-- Button trigger modal -->
                <button type="button" class="button green" data-bind="click: AddSubEvent">
                    Create new task?
                </button>
            </span>
        </div>
        <ul class="subevents" data-bind="foreach: {data: subevents, as:'task0', afterAdd: $root.showEvent, beforeRemove: $root.removeAnim }">
            <!-- ko if: task0._parentID() == "00000000-0000-0000-0000-000000000000" -->
            <li>
                <div data-bind="event: { mouseover: $parent.onHoverGetInfo }, droppable:true, attr: {id: myDivId}">
                    <h2 data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</h2>
                    <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                    <p data-bind="visible: !editingDescription(), text: _description, click: editDescription">adsfafsd;</p>
                    <input data-bind="visible: editingDescription, value: _description, hasFocus: editingDescription" />
                    <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                        <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task0)">X</button></li>
                    </ul>
                    <button data-bind="click: $root.RemoveSubEventAndChildren" class="trash_button" title="Remove">Remove</button>
                    <button data-bind="click: $root.AddSubEvent.bind(task0)" class="add_child_button" title="Add child">-></button>
                </div>
                <ul data-bind="foreach: { data: subevents, as: 'task', afterAdd: $root.showEvent,beforeRemove: $root.removeAnim }">
                    <!-- ko if: ($parent._id() == task._parentID()) -->
                    <li>
                        <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}">
                            <!-- <span data-bind="text: _id"></span> -->
                            <h2 data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</h2>
                            <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                            <p data-bind="visible: !editingDescription(), text: _description, click: editDescription">adsfafsd;</p>
                            <input data-bind="visible: editingDescription, value: _description, hasFocus: editingDescription" />
                            <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                                <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task0)">X</button></li>
                            </ul>
                            <button data-bind="click: $root.RemoveSubEventAndChildren" class="trash_button" title="Remove">Remove</button>
                            <button data-bind="click: $root.AddSubEvent.bind(task)" class="add_child_button" title="Add child">-></button>
                        </div>
                        <ul data-bind="foreach: { data: subevents, as: 'task2', afterAdd: $root.showEvent,beforeRemove: $root.removeAnim  }">
                            <!-- ko if: (task._id() == task2._parentID()) -->
                            <li>
                                <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}">
                                    <!-- <span data-bind="text: _id"></span> -->
                                    <h2 data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</h2>
                                    <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                                    <p data-bind="visible: !editingDescription(), text: _description, click: editDescription">adsfafsd;</p>
                                    <input data-bind="visible: editingDescription, value: _description, hasFocus: editingDescription" />
                                    <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                                        <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task0)">X</button></li>
                                    </ul>
                                    <button data-bind="click: $root.RemoveSubEventAndChildren" class="trash_button" title="Remove">Remove</button>
                                    <button data-bind="click: $root.AddSubEvent" class="add_child_button" title="Add child">-></button>
                                </div>
                                <ul data-bind="foreach: { data: subevents, as: 'task3', afterAdd: $root.showEvent,beforeRemove: $root.removeAnim  }">
                                    <!-- ko if: (task2._id() == task3._parentID()) -->
                                    <li>
                                        <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}">
                                            <!-- <span data-bind="text: _id"></span> -->
                                            <h2 data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</h2>
                                            <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                                            <p data-bind="visible: !editingDescription(), text: _description, click: editDescription">adsfafsd;</p>
                                            <input data-bind="visible: editingDescription, value: _description, hasFocus: editingDescription" />
                                            <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                                                <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task0)">X</button></li>
                                            </ul>
                                            <button data-bind="click: $root.RemoveSubEventAndChildren" class="trash_button" title="Remove">Remove</button>
                                        </div>
                                    </li>
                                    <!-- /ko -->
                                </ul>
                            </li>
                            <!-- /ko -->
                        </ul>
                    </li>
                    <!-- /ko -->
                </ul>

            </li>
            <!-- /ko -->
        </ul>

    </div>
    <div class="active" id="chat_box">
        <div id="chat_hide"></div>
        <div id="switcher_boxes">
            <div id="chat_switch" class="active">Chat</div>
            <div id="assignes_switch">Assignes</div>
        </div>
        <div id="chat_box_inner" class="active box">
            <div>
                <!-- This  is the contact box -->
                <div id="users-list" class="span2">
                    <h4>Users</h4>
                    <ul data-bind="foreach: contacts">
                        <li><span data-bind="text: UserName"></span><span data-bind="visible: Writing"> Writing...</span></li>
                    </ul>
                </div>
                <!-- This  is the chat box -->
                <div id="chat-list">
                    <ul data-bind="foreach: messages">
                        <li>
                            <div class="name_time"><span data-bind="text: User.FullName"></span> (<span data-bind="text: Timestamp.toLocaleTimeString()" class="time"></span>):</div>
                            <div data-bind="html: Content" class="text"></div>
                        </li>
                    </ul>
                </div>
            </div>
            <div id="compose">
                <div></div>
                <div>
                    <div>
                        <div><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here" class="text_input"></textarea></div>
                        <div><button id="send-btn" type="submit" class="button">Send</button></div>
                    </div>
                </div>
            </div>
        </div>
        <div id="assignes_box" class="box">
            <h4>Assignes</h4>
            <ul data-bind="foreach: assignes">
                <li>
                    <span data-bind="text: _name, drag: {value: $data}" class="assignee"></span>
                </li>
            </ul>
        </div>
    </div>
</div>


@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/EEvent.js")
    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")
    @Scripts.Render("~/Content/ckeditor/ckeditor.js")
    @Scripts.Render("~/Content/ckeditor/adapters/jquery.js")
    @Scripts.Render("~/Scripts/EInlineCKEditor.js")
    @Scripts.Render("/signalr/hubs")
    @Scripts.Render("~/Scripts/EChat.js")
    @Scripts.Render("~/Scripts/jquery.slimscroll.min.js")
    @Scripts.Render("~/Scripts/jquery.jsPlumb-1.7.2-min.js")
    <script src="//code.jquery.com/ui/1.11.2/jquery-ui.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">

    <script type="text/javascript">

        (function ($) {
            $.validator.unobtrusive.adapters.addBool("booleanrequired", "required");
        }(jQuery));

        // IE doesn't parse IS8601 formatted dates, so I had to find this function to parse it
        // (URL http://dansnetwork.com/javascript-iso8601rfc3339-date-parser/ )
        Date.prototype.setISO8601 = function(dString){

            var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

            if (dString.toString().match(new RegExp(regexp))) {
                var d = dString.match(new RegExp(regexp));
                var offset = 0;

                this.setUTCDate(1);
                this.setUTCFullYear(parseInt(d[1],10));
                this.setUTCMonth(parseInt(d[3],10) - 1);
                this.setUTCDate(parseInt(d[5],10));
                this.setUTCHours(parseInt(d[7],10));
                this.setUTCMinutes(parseInt(d[9],10));
                this.setUTCSeconds(parseInt(d[11],10));
                if (d[12])
                    this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
                else
                    this.setUTCMilliseconds(0);
                if (d[13] != 'Z') {
                    offset = (d[15] * 60) + parseInt(d[17],10);
                    offset *= ((d[14] == '-') ? -1 : 1);
                    this.setTime(this.getTime() - offset * 60 * 1000);
                }
            }
            else {
                this.setTime(Date.parse(dString));
            }
            return this;
        };

        $(document).ready(function () {
            
            var action = '@HttpContext.Current.Request.RequestContext.RouteData.Values["Action"]';
            var CurrentEventId = (action != "Create") ? '@HttpContext.Current.Request.RequestContext.RouteData.Values["EventID"]' : null;
            var CurrentUser = new chatR.user(@Html.Raw(Json.Encode(Model.ChatUserViewModel)));
            
            var event = new EventApp.EventViewModel(CurrentEventId);
            var chat = new chatR.chatViewModel();
            var users = new chatR.connectedUsersViewModel();

            //$('#confirmModal').modal('show');

            // Proxy creation
            var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code

            // Client-side event handlers, as declared inside the  Hub
            chatHub.client.onMessageReceived = function (message) {
                var date = new Date();
                date.setISO8601(message.Timestamp);
                chat.messages.push(new chatR.chatMessage(new chatR.user(message.User), message.Content, CurrentEventId, date));
                $('#chat-list').slimScroll({ scrollTo: $('#chat-list')[0].scrollHeight });
            }

            chatHub.client.leaves = function (chatUser, timestamp) {
                var disconnectedUser = new chatR.user(chatUser);
                users.customRemove(disconnectedUser);
            }

            chatHub.client.joins = function (chatUser, timestamp) {
                var connectedUser = new chatR.user(chatUser);
                users.contacts.push(connectedUser);
            }

            chatHub.client.startWriting = function (chatUser, started) {
                var user = new chatR.user(chatUser);
                users.startWriting(user, started);
            }

            function sendMessageContent() {
                var content = $("#compose-box").val();
                if (content != "" && content != null) {
                    var msg = new chatR.chatMessage(CurrentUser, content, CurrentEventId);
                    chatHub.server.send(msg).done(function () {
                        $("#compose-box").val("");
                    }).fail(function (e) {
                        alert("Could not connect to server");
                    });
                }
            }

            $("#send-btn").click(function () {
                sendMessageContent();
            });

            // Handles Enter keystroke press event
            $('#compose-box').keypress(function (e) {
                if (e.which == 13) {
                    sendMessageContent();
                }
            });

            $('#compose-box').focusin(function () {
                chatHub.server.startWriting(CurrentUser, CurrentEventId, true);
            });

            $('#compose-box').focusout(function () {
                chatHub.server.startWriting(CurrentUser, CurrentEventId, false);
            });
            
            ko.applyBindings(users, $("#users-list")[0]);
            ko.applyBindings(chat, $("#chat-list")[0]);
            ko.applyBindings(event, $("#event-detail")[0]);
            
           
            
            $.connection.hub.start()
                .done(function () {
                    chatHub.server.getConnectedUsers(CurrentEventId)
                        .done(function (connectedUsers) {
                            ko.utils.arrayForEach(connectedUsers, function (data) {
                                var contact = new chatR.user(data);
                                users.contacts.push(contact);
                            });
                        });
                    chatHub.server.getMessageHistory(CurrentEventId)
                        .done(function (messages) {
                            ko.utils.arrayForEach(messages, function (message) {
                                var date = new Date();
                                date.setISO8601(message.Timestamp);
                                var message = new chatR.chatMessage(new chatR.user(message.User), message.Content, CurrentEventId, date);
                                chat.messages.push(message);
                            });
                        }).done(function () {
                            $('#chat-list').slimScroll({ scrollTo: $('#chat-list')[0].scrollHeight });
                            chatHub.server.joined(CurrentUser, CurrentEventId);
                        });
                });

            $('#chat-list').slimScroll({
                height: '200px',
            });

            //Detail3 component... cleanup & refactor to-do

            //GLOBALS
            
                assignes = ko.observableArray();
                subevents = ko.observableArray();
                connections = [[]];

                drawConnection = function (source, target) {
                    jsPlumb.ready(function () {
                        var conn = jsPlumb.connect({
                            source: source,
                            target: target,
                            endpoint: "Dot",
                            cssClass: "redLine"
                        });
                        return conn;
                    });
                }

                drawAllConnections = function () {
                    for (var key in connections) {
                        if (typeof connections[key][0] != 'undefined') {
                            drawConnection(connections[key][0], connections[key][1])
                        }
                    }
                }

                eraseAllConnections = function () {
                    jsPlumb.detachEveryConnection();
                }

                var _draggedAssignee;
                ko.bindingHandlers.drag = {
                    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                        var dragElement = $(element);
                        var dragOptions = {
                            helper: 'clone',
                            revert: true,
                            revertDuration: 0,
                            start: function () {
                                _draggedAssignee = valueAccessor().value;
                            },
                            cursor: 'default'
                        };
                        dragElement.draggable(dragOptions).disableSelection();
                    }
                };

                ko.bindingHandlers.droppable = {
                    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                        $(element).droppable({
                            accept: ".assignee",
                            activeClass: "state-active",
                            hoverClass: "state-hover",
                            drop: function (event, ui) {
                                var subevent = ko.dataFor(this);
                                subevent._assignees.push(_draggedAssignee);
                            }
                        });
                    }
                };

                isSubeventChild = function (subeventID, parentID) {
                    var indexParent = subevents().map(function (e) { return e._id(); }).indexOf(subeventID)
                    var subeventParentID = subevents()[indexParent]._parentID();
                    if (subeventParentID == parentID) {
                        return true;
                    } else {
                        if (subeventParentID == "00000000-0000-0000-0000-000000000000") {
                            return false;
                        }
                        else {
                            return (isSubeventChild(subeventParentID, parentID));
                        }
                    }
                }

                getAllChildren = function (subevent) {
                    var children = Array();
                    for (var i = 0; i < subevents().length; i++) {
                        if ((isSubeventChild(subevents()[i]._id(), subevent._id()))) {
                            children.push(subevents()[i]._id());
                        }
                    }
                    return children;
                }

                numOfChildren = function (parentID) {
                    var numberOfChildren = 0;
                    for (var i = 0; i < subevents().length; i++) {
                        if (parentID == subevents()[i]._parentID())
                            numberOfChildren++;
                    }
                    return numberOfChildren - 1;
                }

                addLiUl = function (parent) {
                    if (numOfChildren(parent) > 0) {
                        var script = '<li id="sub_' + parent + '"><div><button data-bind="click: appendChildInside"><span data-bind="text: _id() "></span>-></button> usperch </div> </li>';
                    }
                    else {
                        var script = '<ul id="ano">';
                        script += '<li><div><span data-bind="text: _id() "></span> </div></li>';
                        script += '</ul>';
                    }
                    return script;
                };



                getSubevent = function (parentID) {
                    var indexParent = subevents().map(function (e) { return e._id(); }).indexOf(parentID)
                    var pparentID = subevents()[indexParent]._parentID();
                    if (pparentID != "00000000-0000-0000-0000-000000000000") {
                        return (getSubevent(subevents()[indexParent]._parentID()));
                    } else {
                        var value = subevents()[indexParent]._id();
                        return value;
                    }
                }

                function assignee(myAssigne) {
                    self = this; 
                    self._userName = ko.observable(myAssigne.UserName)
                    self._name = ko.observable(myAssigne.Name);
                    self._surname = ko.observable(myAssigne.Surname);
                }

                function subevent(parentID, id, name, description, content, blockID) {
                    self = this;

                    self._id = ko.observable(id);
                    self._parentID = ko.observable(parentID);
                    self._name = ko.observable(name == "" ? "Task name goes here" : name);
                    self._description = ko.observable(description == "" ? "Task description goes here" : description);
                    self._content = ko.observable(content == "" ? "Task content goes here" : content);
                    self._assignees = ko.observableArray();
                    //Div position
                    self._top = ko.observable("");
                    self._left = ko.observable("");
                    self.myDivId = ko.observable(blockID);

                    //Content behavior
                    self.editingName = ko.observable(false);
                    self.editName = function () { this.editingName(true) }

                    self.editingDescription = ko.observable(false);
                    self.editDescription = function () {
                        if (self._description() == "Please enter event content...")
                            self._description("");

                        this.editingDescription(true)
                    }

                    //Array handler
                    self.assigneeRemove = function (subevent, assignee) {
                        subevent._assignees.remove(assignee);
                    }

                    self.subeventRemove = function (subeventParent, subevent) {
                        var conn = jsPlumb.getConnections({
                            source: subeventParent.myDivId(),
                            target: subevent.myDivId()
                        });
                        if (conn[0]) {
                            jsPlumb.detachAllConnections(subevent.myDivId());
                        }
                        //get all children _id() and remove them
                        var allChildren = getAllChildren(subevent);
                        for (var i = 0; i < allChildren.length; i++) {
                            subevents.remove(function (subevent) { return subevent._id() == allChildren[i] });
                        }
                        subevents.remove(subevent);
                    }

                    self.listenUpdateValue = ko.computed(function () {
                        EditSubEvent(self);
                        return self._name() + self._description();
                    }, self);
                };


            //ajax update function
                EditSubEvent = function (subevent) {
                    var eventToUpdate = {
                        EventId: CurrentEventId,
                        SubEventId: subevent._id(),
                        ParentId: subevent._parentID(),
                        Name: subevent._name(),
                        Description: subevent._description(),
                        Content: subevent._content()
                    }
                    console.log(eventToUpdate);
                    $.ajax({
                        url: '/Event/EditSubEvent',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(eventToUpdate),
                        success: function (data) {
                            if (data.Status == true) {
                                Logger.log(arguments.callee.toString(), Logger.success);
                            }
                            else {
                                Logger.log(arguments.callee.toString(), Logger.fail);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            Logger.log(arguments.callee.toString(), textStatus + " " + errorThrown);
                            alert("Error - Modal Window to do");
                        }
                    })
                };

                viewModelDetail = function AppVM(EventID) {

                    
                    
                    var self = this;

                    self.getBlockID = function (parentID, id) {
                        if (parentID == "00000000-0000-0000-0000-000000000000") {
                            return parentID + '_block_' + id;
                        } else {
                            return parentID + '_block_' + id;
                        };
                    }

                    self.loadSubevents = function () {
                        //load example dataset and distribute
                        //subevents.push(new subevent(0, "60ac0084-edcb-499a-92c3-e21b317c5036", "Kola","content","descr", self.getBlockID(0, 1)));
                        //subevents.push(new subevent(0, "82a228e6-7855-4bdb-aff8-8c31a96ac7c6", "Lyze", "content", "descr", self.getBlockID(0, 2)));
                        //subevents.push(new subevent(0, 3, "Voda", "500px", "0px", self.getBlockID(0,3)));


                        /*loading data from database
                        /*var numberOfChildren;
                        var numChild = 1;
                        self.process = function (id) {
                            var myChildren = Array(findMyChilder(id));
                            numberOfChildren = myChildren.length;
                            for (var i = 0; i < myChildren.length; i++){
                                self.appendChild(myChildren[i], id, i);
                                self.process(myChildren[i]);
                            }
                        };*/

                    };
                    self.loadSubevents();
                    


                    self.CurrentEvent = {
                        EventID: ko.observable(""),
                        Name: ko.observable(""),
                        Description: ko.observable(""),
                        Content: ko.observable(""),
                        //aditional view model attributes
                        ParentID: ko.observable(""),
                        Top: ko.observable(""),
                        Left: ko.observable("")
                    };

                    self.kliknuti = function () {
                        self.GetUserInfoById();
                    };

                    self.onHoverGetInfo = function (data) {
                        self.CurrentEvent.ParentID(data._parentID());
                        self.CurrentEvent.EventID(data._id());
                        self.CurrentEvent.Name(data._name());
                        self.CurrentEvent.Content(data._content());

                        self.CurrentEvent.Top(data._top());
                        self.CurrentEvent.Left(data._left());
                    }

                    self.div = function (id, x, y) {
                        return '<div class="subevent" id="block' + id + '" style=" left: ' + x + 'px; top: ' + y + 'px;"></div>'
                    }


                    self.removeAnim = function (elem) { if (elem.nodeType === 1) $(elem).slideUp(function () { $(elem).remove(); }) }

                    self.showEvent = function (elem) {
                        if (elem.nodeType === 1) {
                            $(elem).hide().fadeIn("slow");
                        }
                    };

                    self.shiftBy = function (blockID, parentID, x, y) {
                        var myBlock = "#" + getSubevent(parentID) + "_block_" + parentID + "_" + blockID;
                        var newLeft = parseInt($(myBlock).css("left"), 10) + x + "px";
                        var newTop = parseInt($(myBlock).css("top"), 10) + y + "px";

                        $(myBlock).animate({ "left": newLeft, "top": newTop }, "slow");

                        //force view model update
                        $(myBlock).promise().done(function () {
                            $(myBlock).change(function () {
                                var bindData = ko.dataFor(this);
                                bindData._left(newLeft);
                                bindData._top(newTop);
                            });

                            $(myBlock).trigger('change');
                        });
                    }

                    //database ajax part

                    self.CreatedSubEvent = {
                        EventId: ko.observable(EventID),
                        SubEventId: ko.observable(""),
                        ParentId: ko.observable(""),
                        Name: ko.observable(""),
                        Description: ko.observable(""),
                        Content: ko.observable("")
                    };
                    var usersID = [];
                    var LoadAssignee;
                    self.GetAllMembers = function () {

                        $.ajax({
                            url: '/Event/GetAllMembers',
                            cache: false,
                            type: "POST",
                            async: false,
                            contentType: "application/json; charset=utf-8",
                            data: ko.toJSON(self.CreatedSubEvent),
                            success: function (data) {
                                usersID = data.slice(0);
                                console.log(usersID);
                            },
                            error: function () {
                                alert("Fail");
                            },
                        });
                    }
                    
                    self.GetUserInfoById = function (id) {
                        $.ajax({
                            traditional: true,
                            url: '/Account/GetUserInfoById',
                            cache: false,
                            type: "POST",
                            async: false,
                            data: { 'id': id },
                            success: function (data) {
                                LoadAssignee = data;
                            },
                            error: function () {
                                alert("Fail");
                            },
                        });
                    }
                    
                    self.loadAssignees = function () {
                        self.GetAllMembers();
                        for (var i = 0; i < usersID.length; i++) {
                            self.GetUserInfoById(usersID[i]);
                            console.log(LoadAssignee);
                            assignes.push(new assignee(LoadAssignee));
                        }
                        /*assignes.push(new assignee("Petr"));
                        assignes.push(new assignee("Robert"));
                        assignes.push(new assignee("Jakub"));*/
                    };

                    self.loadAssignees();

                    self.GetEventN = function () {
                        $.ajax({
                            url: '/Event/GetEvent',
                            cache: false,
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            data: self.CreatedSubEvent,
                            success: function (data) {
                                console.log(data);
                                var newSubevent = new subevent(0, data.EventId, data.Name, data.Description, data.Content, self.getBlockID(parentId, data.EventId));
                                subevents.push(newSubevent);
                                self.GetSubEventsN(data);
                                //self.Pending("");
                            },
                            error: function () {
                                alert("Fail");
                            },
                        });
                    }
                    
                    self.GetSubEvents = function () {
                        $.ajax({
                            url: '/Event/GetAllSubEvents',
                            cache: false,
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            data: ko.toJSON(self.CreatedSubEvent),
                            success: function (data) {
                                for (var i = 0; i < data.length; i++) {
                                    var newSubevent = new subevent(data[i].ParentId, data[i].SubEventId, data[i].Name, data[i].Description, data[i].Content, self.getBlockID(data[i].ParentId, data[i].SubEventId));
                                    subevents.push(newSubevent);
                                };

                                for (var i = 0; i < subevents().length; i++) {
                                    if (subevents()[i]._parentID() != "00000000-0000-0000-0000-000000000000") {
                                        var indexParent = subevents().map(function (e) { return e._id(); }).indexOf(subevents()[i]._parentID())
                                        //console.log(subevents()[indexParent]);
                                        //subevents()[indexParent]._parentID();
                                        connections[data[i].SubEventId] = [subevents()[indexParent].myDivId(), subevents()[i].myDivId()];
                                    }
                                    
                                }
                                jsPlumb.ready(function () {
                                    eraseAllConnections();
                                    drawAllConnections();
                                    jsPlumb.repaintEverything();
                                });
                                /*console.log(data);
                                console.log(subevents());*/
                                /*self.SubEventsN(data);
                                self.Pending("");*/
                            },
                            error: function () {
                                alert("Fail2");
                            },
                        });
                    }
                   

                    self.AddSubEvent = function (caller) {
                        var parentId = "00000000-0000-0000-0000-000000000000";
                        //If the caller is created subevent take care about ParentId property
                        if (caller instanceof subevent) {
                            var parentId = self.CurrentEvent.EventID();
                            self.CreatedSubEvent.ParentId(parentId);
                        }
                        self.CreatedSubEvent.Name("Please add name...");
                        self.CreatedSubEvent.Description("Please add task description...");
                        $.ajax({
                            url: '/Event/AddSubEvent',
                            cache: false,
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            data: ko.toJSON(self.CreatedSubEvent),
                            success: function (data, status) {
                                if (data != null) {
                                    var newSubevent = new subevent(data.ParentId, data.SubEventId, data.Name, data.Description, data.Content, self.getBlockID(parentId, data.SubEventId));
                                    subevents.push(newSubevent);
                                    if (caller instanceof subevent) {
                                        eraseAllConnections();
                                        connections[data.SubEventId] = [caller.myDivId(), newSubevent.myDivId()];
                                        drawAllConnections();
                                        jsPlumb.repaintEverything();
                                    }
                                    self.CreatedSubEvent.ParentId("");
                                    console.log("ulozeno");
                                    console.log(data);
                                }
                                else {
                                    Logger.log(arguments.callee.toString(), Logger.fail);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                Logger.log(arguments.callee.toString(), textStatus + " " + errorThrown);
                                alert("Error - Modal Window to do");
                            },
                        });
                    }

                    self.RemoveSubEventAndChildren = function (SubEvent) {
                        var children = getAllChildren(SubEvent);
                        if (confirm('Are you sure to remove #"' + SubEvent._name() + '" event and all its children')) {
                            for (var i = children.length; i > 0; i--) {
                                //console.log(children)
                                //console.log(children[i-1])
                                //alert(children[i]);
                                self.RemoveSubEvent(children[i - 1]);
                            }
                        }
                        self.RemoveSubEvent(SubEvent._id());
                        eraseAllConnections();
                        drawAllConnections();
                        jsPlumb.repaintEverything();
                    }

                    self.RemoveSubEvent = function (subeventId) {
                        var eventToRemove = {
                            EventId: ko.observable(""),
                            SubEventId: subeventId,
                            ParentId: ko.observable(""),
                            Name: ko.observable(""),
                            Description: ko.observable(""),
                            Content: ko.observable("")
                        }
                            $.ajax({
                                url: '/Event/RemoveSubEvent',
                                cache: false,
                                type: 'POST',
                                async: false,
                                contentType: 'application/json; charset=utf-8',
                                data: ko.toJSON(eventToRemove),
                                success: function (data) {
                                    if (data.Status == true) {
                                        console.log("Event removed successfuly!");
                                        delete connections[subeventId]
                                        subevents.remove(function (subevent) { return subevent._id() == subeventId });
                                    }
                                    else {
                                        Logger.log(arguments.callee.toString(), Logger.fail);
                                        alert("Event hasnt deleted successfully. An error has occured!")
                                    }
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    Logger.log(arguments.callee.toString(), textStatus + " " + errorThrown);
                                    alert("Error - Modal Window to do");
                                }
                            });
                    };

                    self.GetSubEvents();
                };
                var myVM = new viewModelDetail(CurrentEventId);
                ko.applyBindings(myVM, $("#event-detail-tree")[0]);
                ko.applyBindings(myVM, $("#assignes_box")[0]);
        });
      
    </script>
}
