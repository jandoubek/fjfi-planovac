@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Detail2";
    Layout = "~/Views/Shared/_EventLayout.cshtml";
}

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")

@Scripts.Render("~/Scripts/knockout-3.2.0.js")
@Scripts.Render("~/Scripts/knockout-3.2.0.debug.js")

@Scripts.Render("~/Scripts/eventor.js")
@Scripts.Render("~/Scripts/eventor_logger.js")

@Scripts.Render("~/Content/ckeditor/ckeditor.js")

<!--[if lt IE 9]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
@Styles.Render("~/Content/bootstrap.css")
@Styles.Render("~/Content/css/style.css")
@Scripts.Render("~/bundles/modernizr")

<script src="//code.jquery.com/ui/1.11.2/jquery-ui.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css">

<style>

    .state-hover{
        background-color:green;
        height:110px;
    }

    .state-active {
        background-color: blue;
    } 
    
    #droppable {
        width: 150px;
    }

    #assignee {
        position:relative;
        float:right;
        width: 50px;
        height: 20px;
    }
</style>

<body>
    <ul data-bind="foreach: assignes">
        <li>
            <span data-bind="text: _name, drag: {value: $data}" id="assignee"></span>
            <br/>
        </li>
    </ul>

    <ul class="subevents" data-bind="foreach: {data: subevents, as:'task0', afterAdd: $root.showEvent }">
        <!-- ko if: task0._parentID() == 0 -->
        <li>
            <div data-bind="event: { mouseover: $parent.onHoverGetInfo }, droppable:true, attr: {id: myDivId}, style: {top: _top, left: _left}">
                <br />
                <span data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</span>
                <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                <br />
                <span data-bind="visible: !editingContent(), text: _content, click: editContent">adsfafsd;</span>
                <input data-bind="visible: editingContent, value: _content, hasFocus: editingContent" />
                <br />
                <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                    <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task0)">X</button></li>
                </ul>
                <br />
                <button>Upravit</button>
                <button>Smazat</button>
                <button data-bind="click: $parent.appendChildInside">-></button>
            </div>
            <ul data-bind="foreach: { data: subevents, as: 'task', afterAdd: $root.showEvent }">
                <!-- ko if: ($parent._id() == task._parentID()) -->
                <li>
                    <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}, style: {top: _top, left: _left}">
                        <br />
                        <span data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</span>
                        <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                        <br />
                        <span data-bind="visible: !editingContent(), text: _content, click: editContent"></span>
                        <input data-bind="visible: editingContent, value: _content, hasFocus: editingContent" />
                        <br />
                        <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                            <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task)">X</button></li>
                        </ul>
                        <br />
                        <button>Upravit</button>
                        <button>Smazat</button>
                        <button data-bind="click: $root.appendChildInside">-></button>
                    </div>
                    <ul data-bind="foreach: { data: subevents, as: 'task2', afterAdd: $root.showEvent  }">
                        <!-- ko if: (task._id() == task2._parentID()) -->
                        <li>
                            <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}, style: {top: _top, left: _left}">
                                <br />
                                <span data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</span>
                                <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                                <br />
                                <span data-bind="visible: !editingContent(), text: _content, click: editContent"></span>
                                <input data-bind="visible: editingContent, value: _content, hasFocus: editingContent" />
                                <br />
                                <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                                    <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task2)">X</button></li>
                                </ul>
                                <br />
                                <button>Upravit</button>
                                <button>Smazat</button>
                                <button data-bind="click: $root.appendChildInside">-></button>
                            </div>
                            <ul data-bind="foreach: { data: subevents, as: 'task3', afterAdd: $root.showEvent  }">
                                <!-- ko if: (task2._id() == task3._parentID()) -->
                                <li>
                                    <div data-bind="event: { mouseover: $root.onHoverGetInfo },droppable:true, attr: {id: myDivId}, style: {top: _top, left: _left}">
                                        <br />
                                        <span data-bind="visible: !editingName(), text: _name, click: editName">&nbsp;</span>
                                        <input data-bind="visible: editingName, value: _name, hasFocus: editingName" />
                                        <br />
                                        <span data-bind="visible: !editingContent(), text: _content, click: editContent"></span>
                                        <input data-bind="visible: editingContent, value: _content, hasFocus: editingContent" />
                                        <br />
                                        <ul data-bind="foreach: {data:_assignees, as: 'assignee', beforeRemove: $root.removeAnim}">
                                            <li><span data-bind="text: assignee._name()"></span><button data-bind="click: $parent.assigneeRemove.bind($data,task3)">X</button></li>
                                        </ul>
                                        <br />
                                        <button>Upravit</button>
                                        <button>Smazat</button>
                                    </div>
                                </li>
                                <!-- /ko -->
                            </ul>
                        </li>
                        <!-- /ko -->
                    </ul>
                </li>
                <!-- /ko -->
            </ul>

        </li>
        <!-- /ko -->
    </ul>


    <script type="text/javascript">
        var action = '@HttpContext.Current.Request.RequestContext.RouteData.Values["Action"]';
        var EventID = (action != "Create") ? '@HttpContext.Current.Request.RequestContext.RouteData.Values["EventID"]' : null;

        $(function () {
            $("#draggable").draggable({scroll:false,cursor: "move", handle: "p"  });
        });
        
        $(document).ready(function () {
            //GLOBALS

            var _draggedAssignee;
            ko.bindingHandlers.drag = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                    var dragElement = $(element);
                    var dragOptions = {
                        helper: 'clone',
                        revert: true,
                        revertDuration: 0,
                        start: function () {
                            _draggedAssignee = valueAccessor().value;
                        },
                        cursor: 'default'
                    };
                    dragElement.draggable(dragOptions).disableSelection();
                }
            };

            ko.bindingHandlers.droppable = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                    $(element).droppable({
                        accept: "#assignee",
                        activeClass: "state-active",
                        hoverClass: "state-hover",
                        drop: function (event, ui) {
                            var subevent = ko.dataFor(this);
                            subevent._assignees.push(_draggedAssignee);
                        }
                    });
                }
            };

            numOfChildren = function (parentID) {
                var numberOfChildren = 0;
                for (var i = 0; i < subevents().length; i++) {
                    if (parentID == subevents()[i]._parentID())
                        numberOfChildren++;
                }
                return numberOfChildren - 1;
            }

            addLiUl = function (parent) {
                if (numOfChildren(parent) > 0) {
                    var script = '<li id="sub_' + parent +'"><div><button data-bind="click: appendChildInside"><span data-bind="text: _id() "></span>-></button> usperch </div> </li>';
                }
                else {
                    var script = '<ul id="ano">';
                    script += '<li><div><span data-bind="text: _id() "></span> </div></li>';
                    script +=    '</ul>';
                }
                return script;
            };

            assignes = ko.observableArray();
            subevents = ko.observableArray();

            getSubevent = function (parentID) {
                var indexParent = subevents().map(function (e) { return e._id(); }).indexOf(parentID)
                var pparentID = subevents()[indexParent]._parentID();
                if (pparentID != 0) {
                    return (getSubevent(subevents()[indexParent]._parentID()));
                } else {
                    var value = subevents()[indexParent]._id();
                    return value;
                }
            }

            function assignee(name) {
                self = this;

                self._name = ko.observable(name);
            }

            function subevent(parentID, id, name, top, left, blockID) {
                self = this;

                self._id = ko.observable(id);
                self._parentID = ko.observable(parentID);
                self._name = ko.observable(name);
                self._content = ko.observable("Please enter event content...");
                self._assignees = ko.observableArray();
                //Div position
                self._top = ko.observable(top);
                self._left = ko.observable(left);
                self.myDivId = ko.observable(blockID);

                //Content behavior
                self.editingName = ko.observable(false);
                self.editName = function () { this.editingName(true) }

                self.editingContent = ko.observable(false);
                self.editContent = function () {
                    if (self._content() == "Please enter event content...")
                        self._content("");

                    this.editingContent(true)
                }

                //Array handler
                self.assigneeRemove = function (subevent,assignee) {
                    subevent._assignees.remove(assignee);
                }
            };

            viewModel = function AppVM() {

                var self = this;
                var notImplemented = "Not implemented yet";

                var globalLeftShift = 220;
                var globalTopShift = 220;

                self.getSubeventFromId = function (stringId) {
                    var parentId = Array();
                    parentId[0] = "";
                    parentId[0] = stringId.match(/[\d]+_/);
                    var parentIdIndex = parentId[0][0];
                    if (parentIdIndex != null) {
                        var stringLength = parentIdIndex.length;
                        parentIdIndex = parentIdIndex.substr(0, stringLength - 1);
                        return parentIdIndex;
                    } else {
                        return 0;
                    }

                };

                self.getBlockID = function (parentID, id) {
                    if (parentID == 0) {
                        return 0 + '_block_' + parentID + '_' + id;
                    } else {
                        return getSubevent(parentID) + '_block_' + parentID + '_' + id;
                    };
                }

                self.loadAssignees = function () {
                    assignes.push(new assignee("Petr"));
                    assignes.push(new assignee("Robert"));
                    assignes.push(new assignee("Jakub"));
                }

                self.loadSubevents = function () {
                    //load example dataset and distribute
                    subevents.push(new subevent(0, 1, "Kola", "0px", "0px", self.getBlockID(0, 1)));
                    subevents.push(new subevent( 0, 2, "Lyze", "250px", "0px",self.getBlockID(0,2)));
                    //subevents.push(new subevent(0, 3, "Voda", "500px", "0px", self.getBlockID(0,3)));


                    /*loading data from database
                    /*var numberOfChildren;
                    var numChild = 1;
                    self.process = function (id) {
                        var myChildren = Array(findMyChilder(id));
                        numberOfChildren = myChildren.length;
                        for (var i = 0; i < myChildren.length; i++){
                            self.appendChild(myChildren[i], id, i);
                            self.process(myChildren[i]);
                        }
                    };*/

                };
                self.loadSubevents();
                self.loadAssignees();


                self.CurrentEvent = {
                    EventID: ko.observable(""),
                    Name: ko.observable(""),
                    Description: ko.observable(""),
                    Content: ko.observable(""),
                    //aditional view model attributes
                    ParentID: ko.observable(""),
                    Top: ko.observable(""),
                    Left: ko.observable("")
                };

                self.kliknuti = function () {
                };

                self.onHoverGetInfo = function (data) {
                    self.CurrentEvent.ParentID(data._parentID());
                    self.CurrentEvent.EventID(data._id());
                    self.CurrentEvent.Name(data._name());
                    self.CurrentEvent.Content(data._content());

                    self.CurrentEvent.Top(data._top());
                    self.CurrentEvent.Left(data._left());
                }

                self.div = function (id, x, y) {
                    return '<div class="subevent" id="block' + id + '" style=" left: ' + x + 'px; top: ' + y + 'px;"></div>'
                }


                self.removeAnim = function (elem) { if (elem.nodeType === 1) $(elem).slideUp(function () { $(elem).remove(); }) }

                self.showEvent = function (elem) {
                    if (elem.nodeType === 1) {
                        $(elem).hide().fadeIn("slow");
                    }
                };

                self.shiftBy = function (blockID, parentID, x, y) {
                    var myBlock = "#" + getSubevent(parentID) + "_block_" + parentID + "_" + blockID;
                    var newLeft = parseInt($(myBlock).css("left"), 10) + x +  "px";
                    var newTop = parseInt($(myBlock).css("top"), 10) + y + "px";

                    $(myBlock).animate({ "left": newLeft, "top": newTop }, "slow");

                    //force view model update
                    $(myBlock).promise().done(function () {
                        $(myBlock).change(function () {
                            var bindData = ko.dataFor(this);
                            bindData._left(newLeft);
                            bindData._top(newTop);
                        });

                        $(myBlock).trigger('change');
                    });
                }

                self.appendChildInside = function (data) {
                    /*to do generates ID*/
                    console.log("makam");
                    newId = Math.floor((Math.random() * 100) + 1);
                    var parentId = self.CurrentEvent.EventID();
                    var parentTop = self.CurrentEvent.Top();
                    var parentLeft = self.CurrentEvent.Left();
                    //alert(subeventID)
                    subevents.push(new subevent(parentId, newId, "Event name", parentTop, parentLeft, self.getBlockID(parentId, newId)));
                    /*if (data._id() == null) {
                        $('#sub_0').append(addLiUl(0));
                        ko.applyBindingsToDescendants(myVM, '#sub_0')
                    } else {
                        if (numOfChildren(data._id()) > 0) {
                            $('#sub_' + data._id()).children("ul").append(addLiUl(data._id()));
                            ko.applyBindingsToDescendants(myVM, '#sub_' + data._id())
                        } else {
                            $('#sub_' + data._id()).append(addLiUl(data._id()));
                            ko.applyBindingsToDescendants(myVM, '#sub_' + data._id())
                        }
                    }
                    ko.applyBindingsToDescendants(myVM,'#ano')*/
                    //var parentChildren = numOfChildren(self.CurrentEvent.EventID());
                    //self.shiftBy(newId, parentId, globalLeftShift, globalTopShift * parentChildren);
                };

                /*self.AddSubEvent = function () {
                    var SubEvent:
                }*/

                self.AddEventMember = function () {
                    id = 1;
                    parentId = 2;
                    role = "Admin";
                    var EventMembership = {
                        EventID: id,
                        UserID: parentId,
                        UserRole: role
                    };

                    $.ajax({
                        url: '/Event/AddEventMember',
                        cache: false,
                        type: "POST",
                        data: EventMembership,
                        success: function () {
                            alert("succes");
                        },
                        error: function () {
                            alert("Fail");
                        },
                    });
                }

                self.GetEvent = function () {
                    $.ajax({
                        url: '/Event/GetEvent',
                        cache: false,
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: ko.toJSON(self.CurrentEvent()),
                        success: function (data) {
                            self.CurrentEvent(data);
                            self.GetSubEvents(data);
                            self.Pending("");
                        },
                        error: function () {
                            alert("Fail");
                        },
                    });
                }

                self.GetSubEvents = function (event) {
                    $.ajax({
                        url: '/Event/GetSubEvents',
                        cache: false,
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: ko.toJSON(event),
                        success: function (data) {
                            self.SubEvents(data);
                            self.Pending("");
                        },
                        error: function () {
                            alert("Fail2");
                        },
                    });
                }

            };
            myVM = new viewModel();
            ko.applyBindings(myVM);
        });
    </script>

</body>
