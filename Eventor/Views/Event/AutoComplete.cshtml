
@{
    ViewBag.Title = "AutoComplete";
    Layout = "~/Views/Shared/_EventLayout.cshtml";
}

@Styles.Render("~/Content/themes/base/base.css")
@Scripts.Render("~/Scripts/jquery-ui-1.11.2.js")  

Debuging (Selected item info):<br />
UserId: <strong data-bind="text: selectedUser().UserId"></strong><br />
UserName: <strong data-bind="text: selectedUser().UserName"></strong><br />
FirstName: <strong data-bind="text: selectedUser().FirstName"></strong><br />
LastName: <strong data-bind="text: selectedUser().LastName"></strong><br />
<br />
<input type="text" data-bind="autoComplete: { selected: selectedUser }" />
<br />
<br />

<script type="text/javascript" language="javascript">

    ko.bindingHandlers.autoComplete = {

        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {

            var settings = valueAccessor();
            var selectedOption = settings.selected;

            var updateElementValueWithLabel = function (event, ui) {

                // Stop the default behavior
                event.preventDefault();

                // Update the value of the html element with the label 
                // of the activated option in the list (ui.item)
                $(element).val(ui.item.label);

                // Update our SelectedOption observable
                if (typeof ui.item !== "undefined") {
                    // ui.item - label|value|...
                    selectedOption(ui.item.object);
                }
            };

            $(element).autocomplete({
                source: function (request, response) {
                    $.getJSON("/Account/UserSearch", {
                        term: request.term
                    }, function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.UserName,
                                value: item.UserId,
                                object: item
                            };
                        }));
                    });
                },
                select: function (event, ui) {
                    updateElementValueWithLabel(event, ui);
                },
                focus: function (event, ui) {
                    updateElementValueWithLabel(event, ui);
                },
                change: function (event, ui) {
                    updateElementValueWithLabel(event, ui);
                }
            });
        }
    };

    ViewModel = function (){
        var self = this;

        self.selectedUser = ko.observable({
            UserId: ko.observable(''),
            UserName: ko.observable(''),
            FirstName: ko.observable(''),
            LastName: ko.observable('')
        });
    }

    $(function () {
        ko.applyBindings(new ViewModel());
    });

</script>

