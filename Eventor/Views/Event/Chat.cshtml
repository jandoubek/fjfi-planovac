@model Eventor.Models.ChatUserViewModel

@{
    ViewBag.Title = "Chat";
    Layout = "~/Views/Shared/_EventLayout.cshtml";
}

<div>
    <div>
        <!-- This  is the contact box -->
        <div id="users-list" class="span2">
            <h4>Users</h4>
            <ul data-bind="foreach: contacts">
                <li><span data-bind="text: UserName"></span><span data-bind="visible: Writing"> Writing...</span></li>
            </ul>
        </div>
        <!-- This  is the chat box -->
        <div id="chat-list"data-bind="foreach: messages">
            <ul>
                <li>
                    <div data-bind="text: User.FullName">
                    </div>
                    <div data-bind="html: Content">
                    </div>
                    <div data-bind="text: Timestamp.toLocaleTimeString()">
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <div id="compose">
        <div></div>
        <div>
            <div>
                <div><textarea id="compose-box" rows="2" cols="50" placeholder="Type your message here"></textarea></div>
                <div><button id="send-btn" type="submit">Send</button></div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="@Url.Content("/signalr/hubs")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/EChat.js")"></script>

<script type="text/javascript">

    // IE doesn't parse IS8601 formatted dates, so I had to find this function to parse it
    // (URL http://dansnetwork.com/javascript-iso8601rfc3339-date-parser/ )
    Date.prototype.setISO8601 = function(dString){

        var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;

        if (dString.toString().match(new RegExp(regexp))) {
            var d = dString.match(new RegExp(regexp));
            var offset = 0;

            this.setUTCDate(1);
            this.setUTCFullYear(parseInt(d[1],10));
            this.setUTCMonth(parseInt(d[3],10) - 1);
            this.setUTCDate(parseInt(d[5],10));
            this.setUTCHours(parseInt(d[7],10));
            this.setUTCMinutes(parseInt(d[9],10));
            this.setUTCSeconds(parseInt(d[11],10));
            if (d[12])
                this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
            else
                this.setUTCMilliseconds(0);
            if (d[13] != 'Z') {
                offset = (d[15] * 60) + parseInt(d[17],10);
                offset *= ((d[14] == '-') ? -1 : 1);
                this.setTime(this.getTime() - offset * 60 * 1000);
            }
        }
        else {
            this.setTime(Date.parse(dString));
        }
        return this;
    };

    $(document).ready(function () {
        var chat = new chatR.chatViewModel();
        var users = new chatR.connectedUsersViewModel();
        var CurrentUser = new chatR.user(@Html.Raw(Json.Encode(Model)));
        var CurrentEventId = "e1c3480d-ea7b-e411-ad33-a06ba7b43542";

        // Proxy creation
        var chatHub = $.connection.chatHub; // chatHub is the name of the Hub as declared in server side code

        // Client-side event handlers, as declared inside the  Hub
        chatHub.client.onMessageReceived = function (message) {
            var date = new Date();
            date.setISO8601(message.Timestamp);
            chat.messages.push(new chatR.chatMessage(new chatR.user(message.User), message.Content, CurrentEventId, date));
        }

        chatHub.client.leaves = function (chatUser, timestamp) {
            var disconnectedUser = new chatR.user(chatUser);
            users.customRemove(disconnectedUser);
        }

        chatHub.client.joins = function (chatUser, timestamp) {
            var connectedUser = new chatR.user(chatUser);
            users.contacts.push(connectedUser);
        }

        chatHub.client.startWriting = function (chatUser, started) {
            var user = new chatR.user(chatUser);
            users.startWriting(user, started);
        }

        function sendMessageContent() {
            var content = $("#compose-box").val();
            if (content != "" && content != null) {
                var msg = new chatR.chatMessage(CurrentUser, content, CurrentEventId);
                chatHub.server.send(msg).done(function () {
                    $("#compose-box").val("");
                }).fail(function (e) {
                    alert("Could not connect to server");
                });
            }
        }

        $("#send-btn").click(function () {
            sendMessageContent();
        });

        // Handles Enter keystroke press event
        $('#compose-box').keypress(function (e) {
            if (e.which == 13) {
                sendMessageContent();
                $('#compose-box').blur();
            }
        });

        $('#compose-box').focusin(function () {
            chatHub.server.startWriting(CurrentUser, CurrentEventId, true);
        });

        $('#compose-box').focusout(function () {
            chatHub.server.startWriting(CurrentUser, CurrentEventId, false);
        });

        ko.applyBindings(users, $("#users-list")[0]);
        ko.applyBindings(chat, $("#chat-list")[0]);

        $.connection.hub.start()
            .done(function () {
                chatHub.server.getConnectedUsers(CurrentEventId)
                    .done(function (connectedUsers) {
                        ko.utils.arrayForEach(connectedUsers, function (data) {
                            var contact = new chatR.user(data);
                            users.contacts.push(contact);
                        });
                    });
                chatHub.server.getMessageHistory(CurrentEventId)
                    .done(function (messages) {
                        ko.utils.arrayForEach(messages, function (message) {
                            var date = new Date();
                            date.setISO8601(message.Timestamp);
                            var message = new chatR.chatMessage(new chatR.user(message.User), message.Content, CurrentEventId, date);
                            chat.messages.push(message);
                        });
                    }).done(function () {
                        chatHub.server.joined(CurrentUser, CurrentEventId);
                    });
            });
    });

</script>
